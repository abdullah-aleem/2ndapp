[{"C:\\Users\\Abdullah Aleem\\Documents\\Programing\\test\\Client\\src\\pages\\signup.js":"1","C:\\Users\\Abdullah Aleem\\Documents\\Programing\\test\\Client\\src\\services\\firebase.js":"2","C:\\Users\\Abdullah Aleem\\Documents\\Programing\\test\\Client\\src\\pages\\playarea.js":"3","C:\\Users\\Abdullah Aleem\\Documents\\Programing\\test\\Client\\src\\pages\\home.js":"4","C:\\Users\\Abdullah Aleem\\Documents\\Programing\\test\\Client\\src\\pages\\login.js":"5","C:\\Users\\Abdullah Aleem\\Documents\\Programing\\test\\Client\\src\\pages\\lobby.js":"6","C:\\Users\\Abdullah Aleem\\Documents\\Programing\\test\\Client\\src\\reportWebVitals.js":"7","C:\\Users\\Abdullah Aleem\\Documents\\Programing\\test\\Client\\src\\App.js":"8","C:\\Users\\Abdullah Aleem\\Documents\\Programing\\test\\Client\\src\\index.js":"9","C:\\Users\\Abdullah Aleem\\Documents\\Programing\\test\\Client\\src\\helpers\\globlvarlib.js":"10"},{"size":2260,"mtime":1609179749054,"results":"11","hashOfConfig":"12"},{"size":363,"mtime":1609167192440,"results":"13","hashOfConfig":"12"},{"size":14017,"mtime":1612178058556,"results":"14","hashOfConfig":"12"},{"size":1010,"mtime":1609262854048,"results":"15","hashOfConfig":"12"},{"size":3358,"mtime":1609179639233,"results":"16","hashOfConfig":"12"},{"size":3125,"mtime":1610271668646,"results":"17","hashOfConfig":"12"},{"size":362,"mtime":1609093810985,"results":"18","hashOfConfig":"12"},{"size":2569,"mtime":1610018309204,"results":"19","hashOfConfig":"12"},{"size":500,"mtime":1609093810985,"results":"20","hashOfConfig":"12"},{"size":549,"mtime":1609265265925,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"uebsjn",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"36"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"40"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"46"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Abdullah Aleem\\Documents\\Programing\\test\\Client\\src\\pages\\signup.js",[],["51","52"],"C:\\Users\\Abdullah Aleem\\Documents\\Programing\\test\\Client\\src\\services\\firebase.js",[],["53","54"],"C:\\Users\\Abdullah Aleem\\Documents\\Programing\\test\\Client\\src\\pages\\playarea.js",["55","56","57","58","59","60","61","62"],"import React, { Component } from 'react';\r\nimport { GlobalCounterProvider } from '../helpers/globalvar'\r\nimport Counter from '../helpers/Counter';\r\nimport { auth } from '../services/firebase';\r\nimport '../style.css';\r\nimport { Switch } from 'react-router-dom';\r\nimport socketIOClient from \"socket.io-client\";\r\nconst ENDPOINT = \"http://127.0.0.1:4001\";\r\nvar connectionOptions = {\r\n    \"force new connection\": true,\r\n    \"reconnectionAttempts\": \"Infinity\", //avoid having user reconnect manually in order to prevent dead clients after a server restart\r\n    \"timeout\": 10000,                  //before connect_error and connect_timeout are emitted.\r\n    \"transports\": [\"websocket\"]\r\n};\r\nconst socket = socketIOClient(ENDPOINT, connectionOptions);\r\nexport default class Playarea extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            activePlayer: null,\r\n            active1: null,\r\n            active2: null,\r\n            active3: null,\r\n            active4: null,\r\n            error: null,\r\n            user: auth().currentUser,\r\n            myCards: [{}],\r\n            allUsers: [{}],\r\n            joincode: null,\r\n            showRoom: null,\r\n            identity: {},\r\n            players: null,\r\n            turn:false\r\n\r\n        };\r\n\r\n        this.CreateRoom = this.CreateRoom.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.displayPlayedCards = this.displayPlayedCards.bind(this);\r\n\r\n    }\r\n\r\n\r\n\r\n    playCard(card) {\r\n        if (this.state.turn){\r\n        socket.emit('cardPlayed', card, this.state.activePlayer);\r\n        let temCards = this.state.myCards;\r\n        temCards.splice(temCards.indexOf(card), 1)\r\n        this.setState({ myCards: temCards,turn:false });\r\n        }\r\n        else{return;}\r\n    }\r\n\r\n\r\n\r\n    async CreateRoom() {\r\n        const randomcode = Math.floor(Math.random() * 100000) + 1;\r\n        await this.setState({\r\n            code: randomcode,\r\n            identity: { name: this.state.user.email, sendcode: randomcode, id: null },\r\n\r\n        }\r\n\r\n        );\r\n        socket.emit(\"Requesttojoinroom\", this.state.identity);\r\n        socket.on('Youjoined', (identity, users) => {\r\n            console.log(users);\r\n            this.setState({\r\n                players: identity.totalPlayers,\r\n                showRoom: identity.showRoom,\r\n                allUsers: users,\r\n                identity: { user: identity.name, sendcode: identity.sendcode, id: identity.id },\r\n                activePlayer: identity.totalPlayers,\r\n\r\n            });\r\n\r\n        }\r\n\r\n\r\n        )\r\n        socket.on('NewPlayerJoined', (player, showRoom, newPlayer) => {\r\n            console.log(newPlayer);\r\n\r\n            this.setState({\r\n                players: player,\r\n                showRoom: showRoom,\r\n                // identity: info,\r\n                allUsers: newPlayer,\r\n\r\n            });\r\n            console.log(player);\r\n        }\r\n        )\r\n        socket.on('yourCards', (cards,turn) => {\r\n            console.log(cards);\r\n            this.setState({ myCards: cards, turn:turn })\r\n        })\r\n        socket.on('cardPlayedBy', (card, position) => {\r\n\r\n            this.displayPlayedCards(card, position);\r\n        })\r\n        socket.on('nextTurn',turn=>{this.setState({turn:turn})})\r\n        socket.on('yourTurn',turn=>{\r\n            console.log(\"your turn function\")\r\n            \r\n            this.setState({turn:turn})})\r\n    \r\n\r\n\r\n    }\r\n    displayPlayedCards(card, by) {\r\n        switch (by) {\r\n            case 1:\r\n                this.setState({\r\n                    active1: <div class=\"card\" >\r\n                        <div class=\"value\" card-value={card.value}>{card.title}\r\n                        </div>\r\n                        <div className={card.class}>\r\n                        </div>\r\n                    </div>\r\n                })\r\n                break;\r\n\r\n            case 2:\r\n                this.setState({\r\n                    active2: <div class=\"card\" >\r\n                        <div class=\"value\" card-value={card.value}>{card.title}\r\n                        </div>\r\n                        <div className={card.class}>\r\n                        </div>\r\n                    </div>\r\n                })\r\n                break;\r\n\r\n            case 3:\r\n                this.setState({\r\n                    active3: <div class=\"card\" >\r\n                        <div class=\"value\" card-value={card.value}>{card.title}\r\n                        </div>\r\n                        <div className={card.class}>\r\n                        </div>\r\n                    </div>\r\n                })\r\n                break;\r\n\r\n            case 4:\r\n                this.setState({\r\n                    active4: <div class=\"card\" >\r\n                        <div class=\"value\" card-value={card.value}>{card.title}\r\n                        </div>\r\n                        <div className={card.class}>\r\n                        </div>\r\n                    </div>\r\n                })\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n    handleChange(event) {\r\n        this.setState({\r\n            joincode: parseInt(event.target.value),\r\n        })\r\n    }\r\n    async handleSubmit(event) {\r\n        event.preventDefault();\r\n        if (!this.state.joincode) { }\r\n        else {\r\n            await this.setState({ identity: { name: this.state.user.email, sendcode: this.state.joincode, id: null } })\r\n            //connect with server and send him the code to the room the server will check the people in the room and then rply according\r\n            socket.emit(\"Requesttojoinroom\", this.state.identity)\r\n            socket.on('Youjoined', (identity, users) => {\r\n                console.log(users);\r\n                this.setState({\r\n                    players: identity.totalPlayers,\r\n                    showRoom: identity.showRoom,\r\n                    allUsers: users,\r\n                    identity: { user: identity.name, sendcode: identity.sendcode, id: identity.id },\r\n                    activePlayer: identity.totalPlayers,\r\n\r\n\r\n                });\r\n            }\r\n            )\r\n            socket.on('NewPlayerJoined', (player, showRoom, newPlayer) => {\r\n                console.log(newPlayer);\r\n\r\n\r\n                this.setState({\r\n\r\n                    players: player,\r\n                    allUsers: newPlayer,\r\n                    showRoom: showRoom,\r\n                    // identity: info,\r\n\r\n\r\n                });\r\n                console.log(player);\r\n                console.log(showRoom);\r\n            }\r\n            )\r\n            socket.on('yourCards', (cards,turn) => {\r\n                console.log(cards);\r\n                this.setState({ myCards: cards,turn:turn })\r\n            })\r\n\r\n            socket.on('cardPlayedBy', (card, position) => {\r\n                this.displayPlayedCards(card, position);\r\n\r\n            })\r\n            socket.on('nextTurn',turn=>{\r\n                console.log(\"next turn function\")\r\n                this.setState({turn:turn})})\r\n            socket.on('yourTurn',turn=>{\r\n                console.log(\"your turn function\")\r\n                \r\n                this.setState({turn:turn})})\r\n        }\r\n\r\n    }\r\n\r\n    render() {\r\n\r\n        const showCards = this.state.myCards.map((card) =>\r\n\r\n            <div class=\"card\" onClick={() => { this.playCard(card) }}>\r\n                <div class=\"value\" card-value={card.value}>{card.title}\r\n                </div>\r\n                <div className={card.class}>\r\n                </div>\r\n            </div>\r\n        );\r\n\r\n        return (\r\n            <div>\r\n\r\n                <div style={{ display: !this.state.showRoom ? 'block' : 'none' }}>\r\n                    <div>\r\n                        <div>\r\n                            <h1>\r\n                                {this.state.code}\r\n                            </h1>\r\n                            <button onClick={this.CreateRoom}>\r\n                                Create Room\r\n                    </button>\r\n                            <form\r\n                                className=\"mt-5 py-5 px-5\"\r\n                                autoComplete=\"off\"\r\n                                onSubmit={this.handleSubmit}\r\n                            >\r\n                                <input onChange={this.handleChange} type='number' value={this.state.email} />\r\n                                <button type=\"submit\"  >join room</button>\r\n\r\n                            </form>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div style={{ display: this.state.showRoom ? 'block' : 'none' }}>\r\n                    <nav class=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n\r\n                        <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNavAltMarkup\" aria-controls=\"navbarNavAltMarkup\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                            <span class=\"navbar-toggler-icon\"></span>\r\n                        </button>\r\n                        <div class=\"collapse navbar-collapse\" id=\"navbarNavAltMarkup\">\r\n                            <div class=\"navbar-nav\">\r\n                                <a class=\"nav-item nav-link active\" href=\"#\">Rang card game</a>\r\n                                <a class=\"nav-item nav-link\" href=\"#\" >Distribute</a>\r\n                                <a class=\"nav-item nav-link\" href=\"#\">declare winner</a>\r\n                                <a class=\"nav-item nav-link\" href=\"#\">Endgame</a>\r\n                                <a class=\"nav-item nav-link\" href=\"#\">Choose 1 player</a>\r\n                            </div>\r\n                        </div>\r\n                    </nav>\r\n                    <div>\r\n                        {this.state.code}{this.state.joincode}\r\n                    </div>\r\n                    <div className='count'>\r\n                        <button type=\"button\" class=\" mb-3 btn btn-success\">\r\n                            Players online: <span class=\"badge badge-light\"> {this.state.players}</span>\r\n                        </button>\r\n                    </div>\r\n\r\n                    <br />\r\n\r\n                    <div class=\"row\">\r\n                        <div class=\"card text-white bg-primary mb-3\" style={{ 'max-width': '18rem', 'float': 'left' }}>\r\n                            <div class=\"card-header\">Player 1</div>\r\n                            <div class=\"card-body\">\r\n                                <h5 class=\"card-title\">\r\n\r\n                                </h5>\r\n                                <p class=\"card-text\">\r\n                                    {this.state.allUsers[0] != null ? this.state.allUsers[0].name : ''}\r\n                                </p>\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"deck\">\r\n                            {this.state.active1}\r\n                        </div>\r\n                        <div class=\"deck\">\r\n                            {this.state.active2}\r\n                        </div>\r\n                        <div class=\"deck\">\r\n                            {this.state.active3}\r\n                        </div>\r\n                        <div class=\"deck\">\r\n                            {this.state.active4}\r\n                        </div>\r\n                        <div class=\"col-4 mb-3\"></div>\r\n                        <div class=\"col-4 mb-3\"></div>\r\n                        <div class=\"card text-white bg-primary mb-3\" style={{ 'max-width': '18rem', 'float': 'right' }}>\r\n                            <div class=\"card-header\">Player 2</div>\r\n                            <div class=\"card-body\">\r\n                                <h5 class=\"card-title\">\r\n                                </h5>\r\n                                <p class=\"card-text\"> {this.state.allUsers[1] != null ? this.state.allUsers[1].name : ''}\r\n                                </p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div class=\"row\">\r\n                        <div class=\"card text-white bg-primary mb-3\" style={{ 'max-width': '18rem', 'float': 'left' }}>\r\n                            <div class=\"card-header\">Player 3</div>\r\n                            <div class=\"card-body\">\r\n                                <h5 class=\"card-title\">\r\n\r\n                                </h5>\r\n                                <p class=\"card-text\">{this.state.allUsers[2] != null ? this.state.allUsers[2].name : ''}\r\n\r\n\r\n                                </p>\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"col-4 mb-3\"></div>\r\n                        <div class=\"col-4 mb-3\"></div>\r\n                        <div class=\"card text-white bg-primary mb-3\" style={{ 'max-width': '18rem', 'float': 'right' }}>\r\n                            <div class=\"card-header\">Player 4</div>\r\n                            <div class=\"card-body\">\r\n                                <h5 class=\"card-title\">\r\n\r\n                                </h5>\r\n                                <p class=\"card-text\"> {this.state.allUsers[3] != null ? this.state.allUsers[3].name : ''}\r\n                                </p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"deck\">\r\n                        {showCards}\r\n                    </div>\r\n                </div >\r\n\r\n\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\n\r\n// const requestOptions = {\r\n//     method: 'POST',\r\n//     headers: { 'Content-Type': 'application/json' },\r\n//     body: JSON.stringify({\r\n//         id: 0,\r\n//         name: \"abdullah\",\r\n//         active: true,\r\n//         room: randomcode\r\n//     })\r\n// };\r\n// const response = await fetch('https://localhost:5001/api/user', requestOptions);\r\n// const data = await response.json();\r\n// console.log(data);","C:\\Users\\Abdullah Aleem\\Documents\\Programing\\test\\Client\\src\\pages\\home.js",[],"C:\\Users\\Abdullah Aleem\\Documents\\Programing\\test\\Client\\src\\pages\\login.js",["63","64"],"import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { signin, signInWithGoogle, signInWithGitHub } from \"../helpers/auth\";\r\n\r\nexport default class Login extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            error: null,\r\n            email: \"\",\r\n            password: \"\"\r\n        };\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    handleChange(event) {\r\n        this.setState({\r\n            [event.target.name]: event.target.value\r\n        });\r\n    }\r\n\r\n    async handleSubmit(event) {\r\n        event.preventDefault();\r\n        this.setState({ error: \"\" });\r\n        try {\r\n            await signin(this.state.email, this.state.password);\r\n        } catch (error) {\r\n            this.setState({ error: error.message });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                <form\r\n                    className=\"mt-5 py-5 px-5\"\r\n                    autoComplete=\"off\"\r\n                    onSubmit={this.handleSubmit}\r\n                >\r\n                    <h1>\r\n                        Login to\r\n            <Link className=\"title ml-2\" to=\"/\">\r\n                            Chatty\r\n            </Link>\r\n                    </h1>\r\n                    <p className=\"lead\">\r\n                        Fill in the form below to login to your account.\r\n          </p>\r\n                    <div className=\"form-group\">\r\n                        <input\r\n                            className=\"form-control\"\r\n                            placeholder=\"Email\"\r\n                            name=\"email\"\r\n                            type=\"email\"\r\n                            onChange={this.handleChange}\r\n                            value={this.state.email}\r\n                        />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <input\r\n                            className=\"form-control\"\r\n                            placeholder=\"Password\"\r\n                            name=\"password\"\r\n                            onChange={this.handleChange}\r\n                            value={this.state.password}\r\n                            type=\"password\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        {this.state.error ? (\r\n                            <p className=\"text-danger\">{this.state.error}</p>\r\n                        ) : null}\r\n                        <button className=\"btn btn-primary px-5\" type=\"submit\">Login</button>\r\n                    </div>\r\n                    <p>You can also log in with any of these services</p>\r\n                    <button className=\"btn btn-danger mr-2\" type=\"button\" onClick={this.googleSignIn}>\r\n                        Sign in with Google\r\n          </button>\r\n                    <button className=\"btn btn-secondary\" type=\"button\" onClick={this.githubSignIn}>\r\n                        Sign in with GitHub\r\n          </button>\r\n                    <hr />\r\n                    <p>\r\n                        Don't have an account? <Link to=\"/signup\">Sign up</Link>\r\n                    </p>\r\n                </form>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}",["65","66"],"C:\\Users\\Abdullah Aleem\\Documents\\Programing\\test\\Client\\src\\pages\\lobby.js",["67"],"import React, { Component } from 'react';\r\n\r\nimport { useHistory } from 'react-router-dom';\r\nimport socketIOClient from \"socket.io-client\";\r\nconst ENDPOINT = \"http://127.0.0.1:4001\";\r\nvar connectionOptions =  {\r\n    \"force new connection\" : true,\r\n    \"reconnectionAttempts\": \"Infinity\", //avoid having user reconnect manually in order to prevent dead clients after a server restart\r\n    \"timeout\" : 10000,                  //before connect_error and connect_timeout are emitted.\r\n    \"transports\" : [\"websocket\"]\r\n};\r\nexport default class Lobby extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            code: null,\r\n            joincode:null\r\n        };\r\n        this.CreateRoom = this.CreateRoom.bind(this);\r\n        \r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n\r\n    async CreateRoom() {\r\n        const randomcode = Math.floor(Math.random() * 100000) + 1;\r\n        this.setState({\r\n            code: randomcode\r\n        }\r\n\r\n        );\r\n        // const requestOptions = {\r\n        //     method: 'POST',\r\n        //     headers: { 'Content-Type': 'application/json' },\r\n        //     body: JSON.stringify({\r\n        //         id: 0,\r\n        //         name: \"abdullah\",\r\n        //         active: true,\r\n        //         room: randomcode\r\n        //     })\r\n        // };\r\n        // const response = await fetch('https://localhost:5001/api/user', requestOptions);\r\n        // const data = await response.json();\r\n        // console.log(data);\r\n        // this.props.history.push(`/playarea/${data.room}`)\r\n\r\n    }\r\n    componentDidMount()\r\n    {\r\n\r\n    }\r\n    \r\n    handleChange(event){\r\n        this.setState({\r\n            joincode:event.target.value,\r\n        })\r\n    }\r\n    handleSubmit(event)\r\n    {\r\n        event.preventDefault();\r\n        if(!this.state.joincode){}\r\n        else\r\n        {\r\n            //connect with server and send him the code to the room the server will check the people in the room and then rply according\r\n            const socket = socketIOClient(ENDPOINT,connectionOptions);\r\n            socket.emit(\"Requesttojoinroom\",this.state.joincode,)  \r\n            socket.on(\"FromAPI\", data => {\r\n                console.log(data);  \r\n            })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n\r\n            <div>\r\n                <div>\r\n                    <h1>\r\n                        {this.state.code}\r\n                    </h1>\r\n                    <button onClick={this.CreateRoom}>\r\n                        Create Room\r\n                    </button>\r\n                    <form\r\n                        className=\"mt-5 py-5 px-5\"\r\n                        autoComplete=\"off\"\r\n                        onSubmit={this.handleSubmit}\r\n                    >\r\n                        <input onChange={this.handleChange} value={this.state.email}/>\r\n                        <button type=\"submit\"  >join room</button>\r\n                            \r\n                    </form>\r\n                </div>\r\n\r\n\r\n\r\n            </div>\r\n\r\n        );\r\n    }\r\n}",["68","69"],"C:\\Users\\Abdullah Aleem\\Documents\\Programing\\test\\Client\\src\\reportWebVitals.js",[],"C:\\Users\\Abdullah Aleem\\Documents\\Programing\\test\\Client\\src\\App.js",["70"],"import React, { Component } from 'react';\nimport {\n  Route,\n  BrowserRouter as Router,\n  Switch,\n  Redirect,\n} from \"react-router-dom\";\nimport logo from './logo.svg';\nimport './App.css';\nimport Home from './pages/home';\nimport Login from './pages/login';\nimport Signup from './pages/signup';\nimport Playarea from './pages/playarea';\nimport { auth } from './services/firebase';\nimport Lobby from './pages/lobby';\nfunction PrivateRoute({ component: Component, authenticated, ...rest }) {\n  return (\n    <Route\n      {...rest}\n      render={(props) => authenticated === true\n        ? <Component {...props} />\n        : <Redirect to={{ pathname: '/login', state: { from: props.location } }} />}\n    />\n  )\n}\n\nfunction PublicRoute({ component: Component, authenticated, ...rest }) {\n  return (\n    <Route\n      {...rest}\n      render={(props) => authenticated === false\n        ? <Component {...props} />\n        : <Redirect to='/playarea' />}\n    />\n  )\n}\n\nclass App extends Component  {\n\n  constructor() {\n    super();\n    this.state = {\n        authenticated: false,\n        loading: true\n    };\n}\n\ncomponentDidMount() {\n  auth().onAuthStateChanged(user => {\n      if (user) {\n          this.setState({\n              authenticated: true,\n              loading: false\n          });\n      } else {\n          this.setState({\n              authenticated: false,\n              loading: false\n          });\n      }\n  });\n}\n\nrender() {\n  return this.state.loading === true ? (\n      <div className=\"spinner-border text-success\" role=\"status\">\n          <span className=\"sr-only\">Loading...</span>\n      </div>\n  ) : (\n \n          <Router>\n              <Switch>\n                  <Route exact path=\"/\" component={Home} />\n                  <PrivateRoute\n                      path=\"/playarea\"\n                      authenticated={this.state.authenticated}\n                      component={Playarea}\n                  />\n                  <PrivateRoute\n                      path=\"/lobby\"\n                      authenticated={this.state.authenticated}\n                      component={Lobby}\n                  />\n                  <PublicRoute\n                      path=\"/signup\"\n                      authenticated={this.state.authenticated}\n                      component={Signup}\n                  />\n                  <PublicRoute\n                      path=\"/login\"\n                      authenticated={this.state.authenticated}\n                      component={Login}\n                  />\n              </Switch>\n          </Router>\n      );\n}\n\n}\n\n\nexport default App;\n\n",["71","72"],"C:\\Users\\Abdullah Aleem\\Documents\\Programing\\test\\Client\\src\\index.js",[],"C:\\Users\\Abdullah Aleem\\Documents\\Programing\\test\\Client\\src\\helpers\\globlvarlib.js",[],{"ruleId":"73","replacedBy":"74"},{"ruleId":"75","replacedBy":"76"},{"ruleId":"73","replacedBy":"77"},{"ruleId":"75","replacedBy":"78"},{"ruleId":"79","severity":1,"message":"80","line":2,"column":10,"nodeType":"81","messageId":"82","endLine":2,"endColumn":31},{"ruleId":"79","severity":1,"message":"83","line":3,"column":8,"nodeType":"81","messageId":"82","endLine":3,"endColumn":15},{"ruleId":"79","severity":1,"message":"84","line":6,"column":10,"nodeType":"81","messageId":"82","endLine":6,"endColumn":16},{"ruleId":"85","severity":1,"message":"86","line":269,"column":33,"nodeType":"87","endLine":269,"endColumn":78},{"ruleId":"85","severity":1,"message":"86","line":270,"column":33,"nodeType":"87","endLine":270,"endColumn":72},{"ruleId":"85","severity":1,"message":"86","line":271,"column":33,"nodeType":"87","endLine":271,"endColumn":71},{"ruleId":"85","severity":1,"message":"86","line":272,"column":33,"nodeType":"87","endLine":272,"endColumn":71},{"ruleId":"85","severity":1,"message":"86","line":273,"column":33,"nodeType":"87","endLine":273,"endColumn":71},{"ruleId":"79","severity":1,"message":"88","line":3,"column":18,"nodeType":"81","messageId":"82","endLine":3,"endColumn":34},{"ruleId":"79","severity":1,"message":"89","line":3,"column":36,"nodeType":"81","messageId":"82","endLine":3,"endColumn":52},{"ruleId":"73","replacedBy":"90"},{"ruleId":"75","replacedBy":"91"},{"ruleId":"79","severity":1,"message":"92","line":3,"column":10,"nodeType":"81","messageId":"82","endLine":3,"endColumn":20},{"ruleId":"73","replacedBy":"93"},{"ruleId":"75","replacedBy":"94"},{"ruleId":"79","severity":1,"message":"95","line":8,"column":8,"nodeType":"81","messageId":"82","endLine":8,"endColumn":12},{"ruleId":"73","replacedBy":"96"},{"ruleId":"75","replacedBy":"97"},"no-native-reassign",["98"],"no-negated-in-lhs",["99"],["98"],["99"],"no-unused-vars","'GlobalCounterProvider' is defined but never used.","Identifier","unusedVar","'Counter' is defined but never used.","'Switch' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'signInWithGoogle' is defined but never used.","'signInWithGitHub' is defined but never used.",["98"],["99"],"'useHistory' is defined but never used.",["98"],["99"],"'logo' is defined but never used.",["98"],["99"],"no-global-assign","no-unsafe-negation"]