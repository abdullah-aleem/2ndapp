[{"C:\\Users\\Abdullah Aleem\\Documents\\Programing\\test\\src\\pages\\playarea.js":"1","C:\\Users\\Abdullah Aleem\\Documents\\Programing\\test\\src\\helpers\\Counter.js":"2","C:\\Users\\Abdullah Aleem\\Documents\\Programing\\test\\src\\pages\\home.js":"3"},{"size":4732,"mtime":1609345380982,"results":"4","hashOfConfig":"5"},{"size":504,"mtime":1609313442483,"results":"6","hashOfConfig":"5"},{"size":1010,"mtime":1609262854048,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"10"},"68wh9h",{"filePath":"11","messages":"12","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Abdullah Aleem\\Documents\\Programing\\test\\src\\pages\\playarea.js",["15","16","17"],"import React, { Component } from 'react';\r\nimport { GlobalCounterProvider } from '../helpers/globalvar'\r\nimport Counter from '../helpers/Counter';\r\n\r\nclass Playarea extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            error: null,\r\n            firstplayer:Array(12).fill(null),\r\n            Secondplayer:Array(12).fill(null),\r\n            thirdplayer:Array(12).fill(null),\r\n            forthplayer:Array(12).fill(null)\r\n        };\r\nthis.MakeCards=this.MakeCards.bind(this);\r\nthis.Showfirstplayercards=this.Showfirstplayercards.bind(this);\r\n    }\r\n    MakeCards(){\r\n        const cards= Array(51).fill({null:null})\r\n        \r\n//    const cards={};\r\n   \r\n   for (let count=0;count<13;count++){\r\n           cards[count]={'Spades':count+2}\r\n           \r\n       }\r\n    for (let count=13;count<26;count++){\r\n        cards[count]={'Diamonds':count-11}\r\n        \r\n    }\r\n    for (let count=26;count<39;count++){\r\n        cards[count]={'Heart':count-24}\r\n        \r\n    }\r\n    for (let count=39;count<52;count++){\r\n        cards[count]={'Clubs':count-37}\r\n        \r\n    }\r\n    \r\n    \r\n    \r\n    const shuffled = cards.sort(() => 0.5 - Math.random());\r\n\r\n    this.setState({\r\n        firstplayer:shuffled.slice(0,13),\r\n        secondplayer:shuffled.slice(13,26),\r\n        thirdplayer:shuffled.slice(26,39),\r\n        fourthplayer:shuffled.slice(39,52)\r\n    })\r\nconsole.log(shuffled);\r\n    return;\r\n\r\n}\r\n\r\n\r\nShowfirstplayercards(){\r\n    this.setState({\r\n        firstplayer:this.state.firstplayer\r\n    })\r\n     console.log(this.state.firstplayer);\r\n}\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div>\r\n\r\n\r\n                <div className='tailwindheader'>\r\n                    <header class=\"text-gray-600 body-font\">\r\n                        <div class=\"container mx-auto flex flex-wrap p-5 flex-col md:flex-row items-center\">\r\n                            <a class=\"flex title-font font-medium items-center text-gray-900 mb-4 md:mb-0\">\r\n                                <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" class=\"w-10 h-10 text-white p-2 bg-indigo-500 rounded-full\" viewBox=\"0 0 24 24\">\r\n                                    <path d=\"M12 2L2 7l10 5 10-5-10-5zM2 17l10 5 10-5M2 12l10 5 10-5\"></path>\r\n                                </svg>\r\n                                <span class=\"ml-3 text-xl\">Play Area Rang Game</span>\r\n                            </a>\r\n                            <nav class=\"md:ml-auto flex flex-wrap items-center text-base justify-center\">\r\n\r\n                                <button class=\"inline-flex items-center bg-gray-100 border-0 py-1 px-3 focus:outline-none hover:bg-gray-200 rounded text-base mt-4 md:mt-0\" onClick={this.MakeCards}>Distribute\r\n                                    \r\n                                </button>\r\n\r\n\r\n                                <button class=\"inline-flex items-center bg-gray-100 border-0 py-1 px-3 focus:outline-none hover:bg-gray-200 rounded text-base mt-4 md:mt-0\" onClick={this.Showfirstplayercards}>show player1\r\n                                    \r\n                                </button>\r\n\r\n\r\n                                <button class=\"inline-flex items-center bg-gray-100 border-0 py-1 px-3 focus:outline-none hover:bg-gray-200 rounded text-base mt-4 md:mt-0\">Endgame\r\n                                    \r\n                                </button>\r\n                                <a class=\"mr-5 hover:text-gray-900\">Choose 1 player</a>\r\n                            </nav>\r\n                            \r\n                        </div>\r\n                    </header>\r\n                </div>\r\n\r\n                <div className='Player1'>\r\n                    <h1>player 1</h1>\r\n                    <h2></h2>\r\n                </div>\r\n                <div className='count'>\r\n                    <GlobalCounterProvider>\r\n                        <div style={{ margin: '20px' }}>\r\n                            <Counter />\r\n                        </div>\r\n                    </GlobalCounterProvider>\r\n                </div>\r\n                <div className='Player2'>\r\n                    <h1>player 2</h1>\r\n                    {/* <h2>{this.state.secondplayer}</h2> */}\r\n                </div>\r\n                <div className='Player3'>\r\n                    <h1>player 3</h1>\r\n                    {/* <h2>{this.state.thirdplayer}</h2> */}\r\n                </div>\r\n                <div className='Player4'>\r\n                    <h1>player 4</h1>\r\n                    {/* <h2>{this.state.fourthplayer.length}</h2> */}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\nexport default Playarea;","C:\\Users\\Abdullah Aleem\\Documents\\Programing\\test\\src\\helpers\\Counter.js",["18","19"],"C:\\Users\\Abdullah Aleem\\Documents\\Programing\\test\\src\\pages\\home.js",[],{"ruleId":"20","severity":1,"message":"21","line":72,"column":29,"nodeType":"22","endLine":72,"endColumn":108},{"ruleId":"20","severity":1,"message":"21","line":93,"column":33,"nodeType":"22","endLine":93,"endColumn":69},{"ruleId":"23","severity":1,"message":"24","line":102,"column":21,"nodeType":"22","endLine":102,"endColumn":25},{"ruleId":"25","severity":1,"message":"26","line":1,"column":17,"nodeType":"27","messageId":"28","endLine":1,"endColumn":26},{"ruleId":"25","severity":1,"message":"29","line":5,"column":19,"nodeType":"27","messageId":"28","endLine":5,"endColumn":27},"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","jsx-a11y/heading-has-content","Headings must have content and the content must be accessible by a screen reader.","no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'setState' is assigned a value but never used."]